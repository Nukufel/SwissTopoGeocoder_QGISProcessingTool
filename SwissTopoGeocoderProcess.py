# -*- coding: utf-8 -*-

"""
/***************************************************************************
 geocoder
                                 A QGIS plugin
 SwissTopoGeocoderProcess
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-11-09
        copyright            : (C) 2023 by Nukufel
        email                : Nukufel
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Nukufel'
__date__ = '2023-11-09'
__copyright__ = '(C) 2023 by Nukufel'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os
import sys
import inspect

from qgis.core import QgsProcessingAlgorithm, QgsApplication
from .SwissTopoGeocoderProcess_provider import geocoderProvider
from qgis.core import QgsProject, QgsPointXY, QgsVectorLayer, QgsField, QgsGeometry, QgsFeature, QgsProcessingFeedback
from PyQt5.QtCore import QVariant
from qgis.utils import iface
import requests
import time
import threading

cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0]

if cmd_folder not in sys.path:
    sys.path.insert(0, cmd_folder)


class geocoderPlugin(object):

    def __init__(self):
        self.provider = None

    def initProcessing(self):
        """Init Processing provider for QGIS >= 3.8."""
        self.provider = geocoderProvider()
        QgsApplication.processingRegistry().addProvider(self.provider)

    def initGui(self):
        self.initProcessing()

    def unload(self):
        QgsApplication.processingRegistry().removeProvider(self.provider)
"""
    @staticmethod
    def error_handling_user(type, msg):
        iface.messageBar().pushWarning(type, msg)

    @staticmethod
    def get_cords(address, fet, provider, new_layer):
        url = "https://api3.geo.admin.ch/rest/services/api/SearchServer?origins=address&type=locations&sr=2056&searchText="

        query = address  # You may need to format the address as needed

        response = requests.get(url + query)
        response_json = response.json()

        latitude = response_json['results'][0]['attrs']['lat']
        longitude = response_json['results'][0]['attrs']['lon']

        if latitude is not None and longitude is not None:
            point = QgsPointXY(float(longitude), float(latitude))
            fet.setGeometry(QgsGeometry.fromPointXY(point))

            fet.setAttributes([address, latitude, longitude])
            provider.addFeatures([fet])
            new_layer.updateExtents()
            new_layer.commitChanges()

    def define_layer(self, data_layer_name, address_col):
        try:
            layer = QgsProject.instance().mapLayersByName(data_layer_name)[0]
        except:
            print("Leyername does not exist.")
            return

        new_layer_name = "PointsLayer"
        new_layer = QgsVectorLayer("Point?crs=epsg:4326", new_layer_name, "memory")
        provider = new_layer.dataProvider()
        new_layer.startEditing()

        provider.addAttributes([QgsField("address", QVariant.String),
                                QgsField("lat", QVariant.Double),
                                QgsField("lon", QVariant.Double)])

        fet = QgsFeature()

        for feature in layer.getFeatures():
            try:
                address = feature[address_col]
                self.get_cords(address, fet, provider, new_layer)
            except:
                # give push msg

                print(address, 'failed')

            time.sleep(1)

        QgsProject.instance().addMapLayer(new_layer)

        print("New point layer created and added to the map.")

    def run_define_layer(self, layer_name, column_name):
        self.define_layer(layer_name, column_name)

    def run(self):

            try:
                thread = threading.Thread(target=self.run_define_layer, args=(layer_name, column_name))
                thread.start()
            except:
                print("failed")
"""